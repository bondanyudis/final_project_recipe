package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"

	"github.com/labstack/echo"
)

type User struct {
	Id       int    `json:"id" form:"id"`
	Name     string `json:"name" form:"name"`
	Email    string `json:"email" form:"email"`
	Password string `json:"password" form:"password"`
}
type Bookmark struct {
	Id       int    `json:"id" form:"id"`
	IdRecipe int    `json:"idrecipe" form:"idrecipe"`
	Type     string `json:"type" form:"type"`
}
type dataRecipe struct {
	Id   int    `json:"id" form:"id"`
	Name string `json:"name" form:"name"`
	Url  string `json:"url" form:"url"`
}

type listFilter struct {
	Filter string `json:"filter" form:"filter"`
	Url    string `json:"url" form:"url"`
}

type Categories struct {
	Meals []struct {
		StrCategory string `json:"strCategory"`
	} `json:"meals"`
}
type Area struct {
	Meals []struct {
		StrArea string `json:"strArea"`
	} `json:"meals"`
}
type Filter struct {
	Meals []struct {
		StrMeal      string `json:"strMeal"`
		StrMealThumb string `json:"strMealThumb"`
		IDMeal       string `json:"idMeal"`
	} `json:"meals"`
}

type FilterDrink struct {
	Drinks []struct {
		StrDrink      string `json:"strDrink"`
		StrDrinkThumb string `json:"strDrinkThumb"`
		IDDrink       string `json:"idDrink"`
	} `json:"drinks"`
}

type AutoGenerated struct {
	Drinks []struct {
		StrDrink      string `json:"strDrink"`
		StrDrinkThumb string `json:"strDrinkThumb"`
		IDDrink       string `json:"idDrink"`
	} `json:"drinks"`
}

type Ingredient struct {
	Meals []struct {
		IDIngredient   string      `json:"idIngredient"`
		StrIngredient  string      `json:"strIngredient"`
		StrDescription string      `json:"strDescription"`
		StrType        interface{} `json:"strType"`
	} `json:"meals"`
}
type DrinkFilterCategory struct {
	Drinks []struct {
		StrCategory string `json:"strCategory"`
	} `json:"drinks"`
}

type DrinkFilterIngredient struct {
	Drinks []struct {
		StrIngredient1 string `json:"strIngredient1"`
	} `json:"drinks"`
}
type DescriptionDrinks struct {
	Drinks []struct {
		IDDrink                     string      `json:"idDrink"`
		StrDrink                    string      `json:"strDrink"`
		StrDrinkAlternate           interface{} `json:"strDrinkAlternate"`
		StrDrinkES                  interface{} `json:"strDrinkES"`
		StrDrinkDE                  interface{} `json:"strDrinkDE"`
		StrDrinkFR                  interface{} `json:"strDrinkFR"`
		StrDrinkZHHANS              interface{} `json:"strDrinkZH-HANS"`
		StrDrinkZHHANT              interface{} `json:"strDrinkZH-HANT"`
		StrTags                     string      `json:"strTags"`
		StrVideo                    interface{} `json:"strVideo"`
		StrCategory                 string      `json:"strCategory"`
		StrIBA                      string      `json:"strIBA"`
		StrAlcoholic                string      `json:"strAlcoholic"`
		StrGlass                    string      `json:"strGlass"`
		StrInstructions             string      `json:"strInstructions"`
		StrInstructionsES           interface{} `json:"strInstructionsES"`
		StrInstructionsDE           string      `json:"strInstructionsDE"`
		StrInstructionsFR           interface{} `json:"strInstructionsFR"`
		StrInstructionsZHHANS       interface{} `json:"strInstructionsZH-HANS"`
		StrInstructionsZHHANT       interface{} `json:"strInstructionsZH-HANT"`
		StrDrinkThumb               string      `json:"strDrinkThumb"`
		StrIngredient1              string      `json:"strIngredient1"`
		StrIngredient2              string      `json:"strIngredient2"`
		StrIngredient3              string      `json:"strIngredient3"`
		StrIngredient4              string      `json:"strIngredient4"`
		StrIngredient5              interface{} `json:"strIngredient5"`
		StrIngredient6              interface{} `json:"strIngredient6"`
		StrIngredient7              interface{} `json:"strIngredient7"`
		StrIngredient8              interface{} `json:"strIngredient8"`
		StrIngredient9              interface{} `json:"strIngredient9"`
		StrIngredient10             interface{} `json:"strIngredient10"`
		StrIngredient11             interface{} `json:"strIngredient11"`
		StrIngredient12             interface{} `json:"strIngredient12"`
		StrIngredient13             interface{} `json:"strIngredient13"`
		StrIngredient14             interface{} `json:"strIngredient14"`
		StrIngredient15             interface{} `json:"strIngredient15"`
		StrMeasure1                 string      `json:"strMeasure1"`
		StrMeasure2                 string      `json:"strMeasure2"`
		StrMeasure3                 string      `json:"strMeasure3"`
		StrMeasure4                 interface{} `json:"strMeasure4"`
		StrMeasure5                 interface{} `json:"strMeasure5"`
		StrMeasure6                 interface{} `json:"strMeasure6"`
		StrMeasure7                 interface{} `json:"strMeasure7"`
		StrMeasure8                 interface{} `json:"strMeasure8"`
		StrMeasure9                 interface{} `json:"strMeasure9"`
		StrMeasure10                interface{} `json:"strMeasure10"`
		StrMeasure11                interface{} `json:"strMeasure11"`
		StrMeasure12                interface{} `json:"strMeasure12"`
		StrMeasure13                interface{} `json:"strMeasure13"`
		StrMeasure14                interface{} `json:"strMeasure14"`
		StrMeasure15                interface{} `json:"strMeasure15"`
		StrCreativeCommonsConfirmed string      `json:"strCreativeCommonsConfirmed"`
		DateModified                string      `json:"dateModified"`
	} `json:"drinks"`
}
type DescriptionMeals struct {
	Meals []struct {
		IDMeal            string      `json:"idMeal"`
		StrMeal           string      `json:"strMeal"`
		StrDrinkAlternate interface{} `json:"strDrinkAlternate"`
		StrCategory       string      `json:"strCategory"`
		StrArea           string      `json:"strArea"`
		StrInstructions   string      `json:"strInstructions"`
		StrMealThumb      string      `json:"strMealThumb"`
		StrTags           string      `json:"strTags"`
		StrYoutube        string      `json:"strYoutube"`
		StrIngredient1    string      `json:"strIngredient1"`
		StrIngredient2    string      `json:"strIngredient2"`
		StrIngredient3    string      `json:"strIngredient3"`
		StrIngredient4    string      `json:"strIngredient4"`
		StrIngredient5    string      `json:"strIngredient5"`
		StrIngredient6    string      `json:"strIngredient6"`
		StrIngredient7    string      `json:"strIngredient7"`
		StrIngredient8    string      `json:"strIngredient8"`
		StrIngredient9    string      `json:"strIngredient9"`
		StrIngredient10   string      `json:"strIngredient10"`
		StrIngredient11   string      `json:"strIngredient11"`
		StrIngredient12   string      `json:"strIngredient12"`
		StrIngredient13   string      `json:"strIngredient13"`
		StrIngredient14   string      `json:"strIngredient14"`
		StrIngredient15   string      `json:"strIngredient15"`
		StrIngredient16   interface{} `json:"strIngredient16"`
		StrIngredient17   interface{} `json:"strIngredient17"`
		StrIngredient18   interface{} `json:"strIngredient18"`
		StrIngredient19   interface{} `json:"strIngredient19"`
		StrIngredient20   interface{} `json:"strIngredient20"`
		StrMeasure1       string      `json:"strMeasure1"`
		StrMeasure2       string      `json:"strMeasure2"`
		StrMeasure3       string      `json:"strMeasure3"`
		StrMeasure4       string      `json:"strMeasure4"`
		StrMeasure5       string      `json:"strMeasure5"`
		StrMeasure6       string      `json:"strMeasure6"`
		StrMeasure7       string      `json:"strMeasure7"`
		StrMeasure8       string      `json:"strMeasure8"`
		StrMeasure9       string      `json:"strMeasure9"`
		StrMeasure10      string      `json:"strMeasure10"`
		StrMeasure11      string      `json:"strMeasure11"`
		StrMeasure12      string      `json:"strMeasure12"`
		StrMeasure13      string      `json:"strMeasure13"`
		StrMeasure14      string      `json:"strMeasure14"`
		StrMeasure15      string      `json:"strMeasure15"`
		StrMeasure16      interface{} `json:"strMeasure16"`
		StrMeasure17      interface{} `json:"strMeasure17"`
		StrMeasure18      interface{} `json:"strMeasure18"`
		StrMeasure19      interface{} `json:"strMeasure19"`
		StrMeasure20      interface{} `json:"strMeasure20"`
		StrSource         interface{} `json:"strSource"`
		DateModified      interface{} `json:"dateModified"`
	} `json:"meals"`
}

var users []User
var bookmarks []Bookmark
var filtering []listFilter

var dataRecipes = []dataRecipe{{Id: 1, Name: "Recipe Meal", Url: "https://www.themealdb.com/api.php"}, {Id: 2, Name: "Recipe Cocktail", Url: "https://www.thecocktaildb.com/api.php"}}

var listfilter = []listFilter{{Filter: "By Area", Url: "/getarea"}, {Filter: "By Categories", Url: "/getcategories"}, {Filter: "By ingredient", Url: "/getingredient"}}

var listfilter2 = []listFilter{{Filter: "By Categories", Url: "/getcategories"}, {Filter: "By ingredient", Url: "/getingredient"}}

func Getlistrecipe(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{

		"message":  "LIST RECIPE",
		"response": dataRecipes,
	})
}

func Getarea(c echo.Context) error {
	responsearea, _ := http.Get("https://www.themealdb.com/api/json/v1/1/list.php?a=list")
	responseData, _ := ioutil.ReadAll(responsearea.Body)
	defer responsearea.Body.Close()

	var GetArea Area
	json.Unmarshal(responseData, &GetArea)
	fmt.Println(GetArea)
	return c.JSON(http.StatusOK, map[string]interface{}{

		"message":  "Success get area for Meal db",
		"response": GetArea,
	})
}

func Getcategories(c echo.Context) error {

	responsecategories, _ := http.Get("https://www.themealdb.com/api/json/v1/1/list.php?c=list")
	responseData, _ := ioutil.ReadAll(responsecategories.Body)
	defer responsecategories.Body.Close()

	var Getcategorie Categories
	json.Unmarshal(responseData, &Getcategorie)

	return c.JSON(http.StatusOK, map[string]interface{}{

		"message":  "Success get Categories for meal db",
		"response": Getcategorie,
	})
}

func Getingredient(c echo.Context) error {

	responseingredient, _ := http.Get("https://www.themealdb.com/api/json/v1/1/list.php?i=list")
	responseData, _ := ioutil.ReadAll(responseingredient.Body)
	defer responseingredient.Body.Close()

	var Getingredient Ingredient
	json.Unmarshal(responseData, &Getingredient)

	return c.JSON(http.StatusOK, map[string]interface{}{

		"message":  "Success get ingredient for meal db",
		"response": Getingredient,
	})
}

func ChooseMenu(c echo.Context) error {
	iddata, _ := strconv.Atoi(c.Param("id"))
	var filter2 []listFilter
	for _, value := range dataRecipes {
		if value.Id == iddata {
			if iddata == 1 {
				filter2 = append(filtering, listfilter...)
			} else {
				filter2 = append(filtering, listfilter2...)
			}
			return c.JSON(http.StatusOK, map[string]interface{}{
				"message":    "success get data",
				"value":      value,
				"list_filer": filter2,
			})
		}
	}
	return c.JSON(http.StatusOK, map[string]interface{}{
		"message": "data not found",
	})
}

func FilterByIngredient(c echo.Context) error {
	name := c.QueryParam("name")
	fmt.Println(name)
	urlFilterIngredient := "https://www.themealdb.com/api/json/v1/1/filter.php?i=" + name
	responseFilteringredient, _ := http.Get(urlFilterIngredient)
	responseDataFilterIngredient, _ := ioutil.ReadAll(responseFilteringredient.Body)
	defer responseFilteringredient.Body.Close()

	var FilterIngredient Filter
	json.Unmarshal(responseDataFilterIngredient, &FilterIngredient)

	if FilterIngredient.Meals != nil {
		return c.JSON(http.StatusOK, map[string]interface{}{
			"message": "Succes get data filter by ingredient",
			"data":    FilterIngredient,
		})
	}
	return c.JSON(http.StatusOK, map[string]interface{}{
		"message": "data not found",
	})
}

func FilterByCategories(c echo.Context) error {
	name := c.QueryParam("name")
	urlFilterCategories := "https://www.themealdb.com/api/json/v1/1/filter.php?c=" + name
	responseFilterCategories, _ := http.Get(urlFilterCategories)
	responseDataFilterCategories, _ := ioutil.ReadAll(responseFilterCategories.Body)
	defer responseFilterCategories.Body.Close()

	var FilterCategories Filter
	json.Unmarshal(responseDataFilterCategories, &FilterCategories)

	if FilterCategories.Meals != nil {
		return c.JSON(http.StatusOK, map[string]interface{}{
			"message": "Succes get data filter by Categories",
			"data":    FilterCategories,
		})
	}
	return c.JSON(http.StatusOK, map[string]interface{}{
		"message": "data not found",
	})
}

func FilterByArea(c echo.Context) error {
	name := c.QueryParam("name")
	urlFilterArea := "https://www.themealdb.com/api/json/v1/1/filter.php?a=" + name
	responseFilterArea, _ := http.Get(urlFilterArea)
	responseDataFilterArea, _ := ioutil.ReadAll(responseFilterArea.Body)
	defer responseFilterArea.Body.Close()

	var FilterArea Filter
	json.Unmarshal(responseDataFilterArea, &FilterArea)

	if FilterArea.Meals != nil {
		return c.JSON(http.StatusOK, map[string]interface{}{
			"message": "Succes get data filter by Area",
			"data":    FilterArea,
		})
	}
	return c.JSON(http.StatusOK, map[string]interface{}{
		"message": "data not found",
	})
}

func MealDescription(c echo.Context) error {
	id := c.QueryParam("id")
	urlDescriptionMeals := "https://www.themealdb.com/api/json/v1/1/lookup.php?i=" + id
	responseDescriptionMeals, _ := http.Get(urlDescriptionMeals)
	responseDataDescriptionMeals, _ := ioutil.ReadAll(responseDescriptionMeals.Body)
	defer responseDescriptionMeals.Body.Close()

	var FilterDescriptionMeals DescriptionMeals
	json.Unmarshal(responseDataDescriptionMeals, &FilterDescriptionMeals)

	if FilterDescriptionMeals.Meals != nil {
		return c.JSON(http.StatusOK, map[string]interface{}{
			"message": "Succes get data filter by Categories",
			"data":    FilterDescriptionMeals,
		})
	}
	return c.JSON(http.StatusOK, map[string]interface{}{
		"message": "data not found",
		"data":    nil,
	})
}

func BookmarkMeals(c echo.Context) error {
	bookmark := Bookmark{}
	c.Bind(&bookmark)

	if len(bookmarks) == 0 {
		bookmark.Id = 1
	} else {
		newId := bookmarks[len(bookmarks)-1].Id + 1
		bookmark.Id = newId
		bookmark.Id = newId
	}
	bookmarks = append(bookmarks, bookmark)
	return c.JSON(http.StatusOK, map[string]interface{}{
		"message": "Success Bookmart data recipe",
		"user":    bookmark,
	})
}

func GetBookmarkMeals(c echo.Context) error {

	return c.JSON(http.StatusOK, map[string]interface{}{

		"message":  "List Bookmart meals By Id",
		"response": bookmarks,
	})
}

func DeleteBookmark(c echo.Context) error {
	iddata, _ := strconv.Atoi(c.Param("id"))
	for index, value := range bookmarks {
		if value.Id == iddata {
			bookmarks[index] = bookmarks[len(bookmarks)-1]
			bookmarks[len(bookmarks)-1] = Bookmark{}
			bookmarks = bookmarks[:len(bookmarks)-1]
			return c.JSON(http.StatusOK, map[string]interface{}{
				"message": "data successfully delete,",
				"users":   value,
			})
		}
	}
	return c.JSON(http.StatusOK, map[string]interface{}{
		"message": "data not found",
	})
}
func GetcategoriesDrink(c echo.Context) error {

	responsecategories, _ := http.Get("https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list")
	responseData, _ := ioutil.ReadAll(responsecategories.Body)
	defer responsecategories.Body.Close()

	var Getcategorie DrinkFilterCategory
	json.Unmarshal(responseData, &Getcategorie)

	return c.JSON(http.StatusOK, map[string]interface{}{

		"message":  "Success get Categories for meal db",
		"response": Getcategorie,
	})
}
func GetingredientDrink(c echo.Context) error {

	responseingredient, _ := http.Get("https://www.thecocktaildb.com/api/json/v1/1/list.php?i=list")
	responseData, _ := ioutil.ReadAll(responseingredient.Body)
	defer responseingredient.Body.Close()

	var Getingredient DrinkFilterIngredient
	json.Unmarshal(responseData, &Getingredient)

	return c.JSON(http.StatusOK, map[string]interface{}{

		"message":  "Success get ingredient for meal db",
		"response": Getingredient,
	})
}
func main() {
	e := echo.New()
	makanan := e.Group("makanan")
	//get list all recipe
	e.GET("/listrecipe", Getlistrecipe)
	//get all area for mealdb
	makanan.GET("/area", Getarea)
	//get all Categories for mealdb
	makanan.GET("/categories", Getcategories)
	//get all ingredient for mealbd
	makanan.GET("/ingredient", Getingredient)
	//filter by ingredient
	e.GET("/ChooseMenu/:id", ChooseMenu)
	//
	makanan.GET("/filteringredient", FilterByIngredient)
	//filter by area
	makanan.GET("/filtercategories", FilterByCategories)
	//filter by ingredient
	makanan.GET("/filterarea", FilterByArea)
	//filter by ingredient
	makanan.GET("/mealdescription", MealDescription)
	//Bookmark
	e.POST("/bookmark", BookmarkMeals)
	//getBookmark
	e.GET("/bookmark", GetBookmarkMeals)
	//delete bookmark
	e.DELETE("/bookmark/:id", DeleteBookmark)

	minuman := e.Group("minuman")
	//get all area for Drink
	minuman.GET("/categories", GetcategoriesDrink)
	//get all ingredient for Drink
	minuman.GET("/ingredient", GetingredientDrink)
	e.Logger.Fatal(e.Start(":3008"))
}
